{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { catchError, throwError } from 'rxjs';\nimport { AuthUtils } from 'app/core/auth/auth.utils';\nlet AuthInterceptor = class AuthInterceptor {\n  /**\r\n   * Constructor\r\n   */\n  constructor(_authService) {\n    this._authService = _authService;\n  }\n  /**\r\n   * Intercept\r\n   *\r\n   * @param req\r\n   * @param next\r\n   */\n\n\n  intercept(req, next) {\n    // Clone the request object\n    let newReq = req.clone(); // Request\n    //\n    // If the access token didn't expire, add the Authorization header.\n    // We won't add the Authorization header if the access token expired.\n    // This will force the server to return a \"401 Unauthorized\" response\n    // for the protected API routes which our response interceptor will\n    // catch and delete the access token from the local storage while logging\n    // the user out from the app.\n\n    if (this._authService.accessToken && !AuthUtils.isTokenExpired(this._authService.accessToken)) {\n      newReq = req.clone({\n        headers: req.headers.set('Authorization', 'Bearer ' + this._authService.accessToken)\n      });\n    } // Response\n\n\n    return next.handle(newReq).pipe(catchError(error => {\n      // Catch \"401 Unauthorized\" responses\n      if (error instanceof HttpErrorResponse && error.status === 401) {\n        // Sign out\n        if (this._authService.refreshToken) {\n          return this._authService.signInUsingToken();\n        } else {}\n      }\n\n      return throwError(error);\n    }));\n  }\n\n};\nAuthInterceptor = __decorate([Injectable()], AuthInterceptor);\nexport { AuthInterceptor };","map":null,"metadata":{},"sourceType":"module"}