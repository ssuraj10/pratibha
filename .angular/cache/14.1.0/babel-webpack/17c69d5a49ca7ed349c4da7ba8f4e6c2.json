{"ast":null,"code":"import { catchError, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./auth.service\";\nexport let AuthInterceptor = /*#__PURE__*/(() => {\n  class AuthInterceptor {\n    /**\r\n     * Constructor\r\n     */\n    constructor(_authService) {\n      this._authService = _authService;\n    }\n    /**\r\n     * Intercept\r\n     *\r\n     * @param req\r\n     * @param next\r\n     */\n\n\n    intercept(req, next) {\n      // Clone the request object\n      let newReq = req.clone(); // Request\n      //\n      // If the access token didn't expire, add the Authorization header.\n      // We won't add the Authorization header if the access token expired.\n      // This will force the server to return a \"401 Unauthorized\" response\n      // for the protected API routes which our response interceptor will\n      // catch and delete the access token from the local storage while logging\n      // the user out from the app.\n\n      if (this._authService.accessToken) {\n        newReq = req.clone({\n          headers: req.headers.set('Authorization', 'Bearer ' + this._authService.accessToken)\n        });\n      } // Response\n\n\n      return next.handle(newReq).pipe(catchError(error => {\n        // Catch \"401 Unauthorized\" responses\n        return throwError(error);\n      }));\n    }\n\n  }\n\n  AuthInterceptor.ɵfac = function AuthInterceptor_Factory(t) {\n    return new (t || AuthInterceptor)(i0.ɵɵinject(i1.AuthService));\n  };\n\n  AuthInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthInterceptor,\n    factory: AuthInterceptor.ɵfac\n  });\n  return AuthInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module"}