{"ast":null,"code":"import { BehaviorSubject, of, switchMap, throwError } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    /**\r\n     * Constructor\r\n     */\n    constructor(_httpClient) {\n      this._httpClient = _httpClient;\n      this._authenticated = false;\n      this.messageSource = new BehaviorSubject('');\n      this.currentMessage = this.messageSource.asObservable();\n    } // -----------------------------------------------------------------------------------------------------\n    // @ Accessors\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\r\n     * Setter & getter for access token\r\n     */\n\n\n    set accessToken(token) {\n      localStorage.setItem('accessToken', token);\n    }\n\n    get accessToken() {\n      var _a;\n\n      return (_a = localStorage.getItem('accessToken')) !== null && _a !== void 0 ? _a : '';\n    } // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\r\n     * Forgot password\r\n     *\r\n     * @param email\r\n     */\n\n\n    forgotPassword(email) {\n      return this._httpClient.post('api/auth/forgot-password', email);\n    }\n    /**\r\n     * Reset password\r\n     *\r\n     * @param password\r\n     */\n\n\n    resetPassword(password) {\n      return this._httpClient.post('api/auth/reset-password', password);\n    }\n    /**\r\n     * Sign in\r\n     *\r\n     * @param credentials\r\n     */\n    //  user/verify\n\n\n    signIn(credentials) {\n      // Throw error, if the user is already logged in\n      if (this._authenticated) {\n        return throwError('User is already logged in.');\n      }\n\n      return this._httpClient.post(environment.Main_API + '/auth.php', credentials).pipe(switchMap(response => {\n        // Store the access token in the local storage\n        // this.accessToken = response.accessToken;\n        // Set the authenticated flag to true\n        // localStorage.setItem('username', credentials.username);\n        // this.messageSource.next(credentials.username)\n        // Store the user on the user service\n        // this._userService.user = response.user;\n        // Return a new observable with the response\n        return of(response);\n      }));\n    }\n    /**\r\n     * Sign in using the access token\r\n     */\n\n    /**\r\n     * Sign out\r\n     */\n\n\n    signOut() {\n      // Remove the access token from the local storage\n      localStorage.removeItem('accessToken');\n      localStorage.removeItem('token');\n      localStorage.removeItem('refreshToken');\n      localStorage.removeItem('offsetSeconds');\n      localStorage.removeItem('username'); // Set the authenticated flag to false\n\n      this._authenticated = false; // Return the observable\n\n      return of(true);\n    }\n    /**\r\n     * Sign up\r\n     *\r\n     * @param user\r\n     */\n\n\n    signUp(credentials) {\n      // Throw error, if the user is already logged in\n      if (this._authenticated) {\n        return throwError('User is already logged in.');\n      }\n\n      return this._httpClient.post(environment.Main_API + 'user/register', credentials).pipe(switchMap(response => {\n        // Store the access token in the local storage\n        // this.accessToken = response.accessToken;\n        // Set the authenticated flag to true\n        localStorage.setItem('username', credentials.username);\n        this.messageSource.next(credentials.username); // Store the user on the user service\n        // this._userService.user = response.user;\n        // Return a new observable with the response\n\n        return of(response);\n      }));\n    }\n    /**\r\n     * Unlock session\r\n     *\r\n     * @param credentials\r\n     */\n\n\n    unlockSession(credentials) {\n      return this._httpClient.post('api/auth/unlock-session', credentials);\n    }\n    /**\r\n     * Check the authentication status\r\n     */\n\n\n    check() {\n      // Check if the user is logged in\n      // Check the access token availability\n      if (!this.accessToken) {\n        return of(false);\n      } // if (AuthUtils.isTokenExpired(this.refreshToken, Number(this.offsetSeconds))) {\n      //     return of(false);\n      // }\n      // if (!this.accessToken) {\n      //     if (this.refreshToken) {\n      //         return this.signInUsingToken();\n      //     }\n      // }\n\n\n      if (this.accessToken) {\n        this._authenticated = true;\n      }\n\n      return of(true);\n    }\n\n    ChangePassword(data) {\n      return this._httpClient.post(environment.Main_API + `security/user/changepassword`, data).pipe();\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}